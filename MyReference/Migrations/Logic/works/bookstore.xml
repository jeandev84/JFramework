<!--
Migrations

    Migration Workflow
    Migration Tasks
        Migration Up or Down, One At A Time
        Migration Status
    How Do Migrations Work?
    Migration Configuration
    Migrating Data

During the life of a project, the Model seldom stays the same. New tables arise, and existing tables often need modifications (a new/modified column, a new index, another foreign key etc.). Updating the database structure accordingly, while preserving existing data, is a common concern. Propel provides a set of tools to allow the migration of database structure and data with ease.

    Tip
    Propel supports migrations in MySQL, SQLite and PostgreSQL.

-->
<!--
Migration Workflow
The workflow of Propel migrations is very simple:

    Edit the XML schema to modify the model
    Call the diff task to create a migration class containing the SQL statements altering the database structure
    Review the migration class Propel just generated, and add data migration code if necessary
    Execute the migration using the migrate task.

Here is a concrete example. On a new bookstore project, a developer creates an XML schema with a single book table:
-->
<database name="bookstore" defaultIdMethod="native">
  <table name="book" description="Book Table">
    <column name="id" type="integer" primaryKey="true" autoIncrement="true" />    <column name="title" type="varchar" required="true" primaryString="true" />
    <column name="isbn" required="true" type="varchar" size="24" phpName="ISBN" />
  </table>
</database>
<!--
The developer then calls the diff task to ask Propel to compare the database structure and the XML schema:
-->
<!--
$ propel diff

[propel-sql-diff] Reading databases structure...
[propel-sql-diff] Database is empty
[propel-sql-diff] Loading XML schema files...
[propel-sql-diff] 1 tables found in 1 schema file.
[propel-sql-diff] Comparing models...
[propel-sql-diff] Structure of database was modified: 1 added table
[propel-sql-diff] "PropelMigration_1286483354.php" file successfully created in /path/to/project/build/migrations
[propel-sql-diff]   Please review the generated SQL statements, and add data migration code if necessary.
[propel-sql-diff]   Once the migration class is valid, call the "migrate" task to execute it.


It is recommended to review the generated migration class to check the generated SQL code. It contains two methods, getUpSQL() and getDownSQL(), allowing to migrate the database structure to match the updated schema, and back:

<?php
/**
 * Data object containing the SQL and PHP code to migrate the database
 * up to version 1286483354.
 * Generated on 2010-10-07 22:29:14 by francois
 */
class PropelMigration_1286483354
{

	public function getUpSQL()
	{
		return array('bookstore' => '
CREATE TABLE `book`
(
	`id` INTEGER NOT NULL AUTO_INCREMENT,
	`title` VARCHAR(255) NOT NULL,
	`isbn` VARCHAR(24) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB COMMENT=\'Book Table\';
',
);
	}

	public function getDownSQL()
	{
		return array('bookstore' => '
DROP TABLE IF EXISTS `book`;
',
);
	}
}

<!---


    Tip
    On a project using version control, it is important to commit the migration classes to the code repository. That way, other developers checking out the project will just have to run the same migrations to get a database in a similar state.

Now, to actually create the book table in the database, the developer has to call the migrate task:

$ propel migrate

[propel-migration] Executing migration PropelMigration_1286483354 up
[propel-migration] 1 of 1 SQL statements executed successfully on datasource "bookstore"
[propel-migration] Migration complete. No further migration to execute.
-->

